from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext


from bot.filters import FindTeacherName, FilterChoice
from bot.keyboards import get_student_choice_bt
from bot.states import TeacherState, SampleData, GroupState
from bot.handlers import show_all_lessons


from rksi_parse import all_groups, parse_lessons_for_teachers, parse_teachers


from utils import Database

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ—Å—Ç–æ—è–Ω–∏–π
msg_router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞, –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@msg_router.message(FindTeacherName())
async def new_msg(message: types.Message):
    answer_to_teacher: str = await find_teacher_lessons(message)
    await message.answer(text=answer_to_teacher, parse_mode="HTML")


# ------------------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞, –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
@msg_router.message(FilterChoice())
async def teach_or_student(message: types.Message, state: FSMContext):
    if message.text.lower() == "üéì —Å—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–ü—É–Ω–∫—Ç –º–µ–Ω—é '–°—Ç—É–¥–µ–Ω—Ç', –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç", reply_markup=await get_student_choice_bt())
    elif message.text.lower() == "üßô –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        await state.set_state(TeacherState.name)
        await message.answer("–ñ–¥—É —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")


# ------------------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ user
@msg_router.message(SampleData.name)
async def get_name_user(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É")
    await state.update_data(name=message.text)
    await state.set_state(SampleData.name_group)


# ------------------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã
@msg_router.message(SampleData.name_group)
async def get_name_grp_user(message: types.Message, state: FSMContext):
    all_group: list = await all_groups()

    if message.text.upper() in all_group:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à —à–∞–±–ª–æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
        await state.update_data(name_group=message.text)
        all_info = await state.get_data()
        await state.clear()

        all_info["tg_id"] = message.from_user.id
        await Database().add_one_user(data=all_info)

    else:
        await message.answer("–¢–∞–∫–æ–π <b>–≥—Ä—É–ø–ø—ã</b> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!", parse_mode="HTML")


# ------------------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã - –≤—ã–¥–∞—á–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
@msg_router.message(GroupState.name_group)
async def name_group_result(clb_answer: types.Message, state: FSMContext):
    all_group: list = await all_groups()
    if clb_answer.text.title() in all_group:
        await state.update_data(name_group=clb_answer.text)
        await state.clear()
        await clb_answer.answer(await show_all_lessons(clb_answer.text), parse_mode="HTML")
    else:
        await clb_answer.answer("<b>–ì—Ä—É–ø–ø–∞</b> –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", parse_mode="HTML")


# ------------------------------------------- #


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@msg_router.message()
async def processing_other_messages(message: types.Message):
    if message.text.upper() in await all_groups():
        await message.answer(await show_all_lessons(message.text.upper()), parse_mode="HTML")
    else:
        await message.answer("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç.\n–û–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")


# ------------------------------------------- #


# –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def find_teacher_lessons(message: types.Message) -> str:
    all_teachers: list = await parse_teachers()
    name_teacher: str = ""
    name_teacher_from_user: str = message.text.title()
    for teacher in all_teachers:
        if name_teacher_from_user in teacher:
            name_teacher = teacher
            break

    if name_teacher:

        await parse_lessons_for_teachers(name_teacher)
        await message.answer("‚è≥ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")

        result: str = await show_all_lessons(name_teacher=name_teacher)

        return result

    else:

        return "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω"